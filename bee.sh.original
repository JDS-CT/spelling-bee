				#!/bin/bash
#
# Copyright 2010 Tom White
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Modified 2023-09-24 by ChatGPT when prompted with
# "I want this script to accept the whole word typed in as input, if the user gets the word correct it says good then moves on to the next word. But if the user gets the word wrong it spells it out, in the same way it currently does after the user presses a key."
# Goal is to add typed response to this that way its a mix of typing training and spelling training, becasue instead of copying words you have to know how to spell a word.
# Some small further additions made

# This one goes through the spelling list sequentially
function speak {
	echo "$@" > /tmp/speak
	espeak -v en-us -s 120 -f /tmp/speak --stdout | aplay -q
}

# Check if the "words" file exists
if [ -f "words" ]; then
	# Read words from the file "words" into an array
	mapfile -t words < "words"
	
	speak "spell  "
	
	# Iterate through the array of words
	for word in "${words[@]}"; do
		# read out the word to spell
		speak "Spell, $word"
		flag=1  # Assign 1 to the flag variable (no spaces around =)

		# User tries to spell the word until correct, loop repeats until correct answer is given.
		while [ $flag -eq 1 ]; do  # Use [ ] for comparisons, and -eq for integer equality
			# read user input
			read -p "you_can_type_here: " user_input

			# compare user input to the word, if correct exit the loop
			if [ "$user_input" == "$word" ]; then
				speak "ok you will go to the next word."
				flag=2  # Assign 2 to the flag variable (no spaces around =)
			# if wrong, spell the word and set the flag to reset this while loop and try again.
			else
				# spell it out if the user input is wrong
				letters=$(echo $word | tr '[A-Z]' '[a-z]' | sed 's/[a-z]/&, /g')
				speak $letters
				flag=1  # Assign 1 to the flag variable (no spaces around =)
			fi
		done

		# uncomment to wait for a keypress between words
		# echo "Press a key for the next word"
		# read -n 1 -s
	done
	speak "Good job, you finished spelling"
else
	echo "The 'words' file does not exist."
fi



# This one does random words
#function speak {
#	echo "$@" > /tmp/speak
#	espeak -v en-us -s 120 -f /tmp/speak --stdout | aplay -q
#}

#while true; do
	# read out a random word
#	word=$(sort -R words | head -1)
#	speak "Spell, $word"
#	flag=1  # Assign 1 to the flag variable (no spaces around =)

	# User tries to spell the word until correct, loop repeats until correct answer is given.
#	while [ $flag -eq 1 ]; do  # Use [ ] for comparisons, and -eq for integer equality
		# read user input
#		read -p "Type the word: " user_input

		# compare user input to the random word, if correct exit the loop
#		if [ "$user_input" == "$word" ]; then
#			speak "Good Job, next."
#			flag=2  # Assign 2 to the flag variable (no spaces around =)
		# if wrong, spell the word and set the flag to reset this while loop and try again.
#		else
			# spell it out if the user input is wrong
#			letters=$(echo $word | tr '[A-Z]' '[a-z]' | sed 's/[a-z]/&, /g')
#			speak $letters
#			flag=1  # Assign 1 to the flag variable (no spaces around =)
#		fi
#	done
	
	# uncomment to wait for a keypress between words
	# echo "Press a key for the next word"
	# read -n 1 -s
#done
